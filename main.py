import logging
from aiogram import Bot, Dispatcher, executor, types
from take_tasks import init, get_leaderboard, get_task, check_task
import ranks, botToken, re
from aiogram.types import ReplyKeyboardRemove
API_TOKEN = '5213341891:AAFjB6UwX6WsyBXYJ5RHXYSGeUQZGUDvITk' # your code
tasks_list = init()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

current_task = dict()
current_command = dict()
train_mode = dict()
user_ids = set()

def change_current_command(user : int, command : str):
    global current_command
    current_command[user] = command

def change_current_task(user : int, task : str):
    global current_task
    current_task[user] = task

@dp.message_handler(commands=['start', 'help'])
async def send_help(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É, –∞–≤—Ç–æ—Ä –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π, –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
–ö–æ–º–∞–Ω–¥—ã /help –∏ /start –≤—ã–∑—ã–≤–∞—é—Ç –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ /task –∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ /leaderboard –∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /ranks

–£ –±–æ—Ç–∞ –µ—Å—Ç—å —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /train –∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ø—Ä–æ–ø–∏—à–∏—Ç–µ /exit """)

@dp.message_handler(commands=['rank', 'ranks'])
async def send_ranks(message: types.Message):
    full_ranks = "–ó–≤–∞–Ω–∏—è:\n"
    for [x, y] in ranks.ranks.items():
        if x == -1000000000:
            full_ranks += '–î–æ ' + str(-9) + ' –æ—á–∫–æ–≤ - ' + str(y) + '\n'
        else:
            full_ranks += 'C ' + str(x) + ' –æ—á–∫–æ–≤ - ' + str(y) + '\n'
    await message.answer(full_ranks)


@dp.message_handler(commands=['exit'])
async def exit_from_train(message: types.Message):
    user = message.from_user
    userid = user.id
    if (userid in user_ids) == False:
        train_mode[userid] = False
        user_ids.add(userid)
        current_task[userid] = -1
        current_command[userid] = ''
    if train_mode[userid] == False:
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –≤—ã—Ö–æ–¥–∏—Ç—å.")
        return
    current_command[userid] = ''
    current_task[userid] = -1
    train_mode[userid] = False
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")


@dp.message_handler(commands=['train'])
async def get_train(message: types.Message):
    user = message.from_user
    userid = user.id

    if (userid in user_ids) == False:
        train_mode[userid] = False
        user_ids.add(userid)
        current_task[userid] = -1
        current_command[userid] = ''

    if current_task[userid] != -1:
        await message.answer("–í—ã –∑–∞–±—ã–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    if current_command[userid] == 'task' or current_command[userid] == 'train':
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [str(c) for c in tasks_list]
    keyboard.add(*buttons)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", reply_markup=keyboard)
    change_current_command(message.from_user.id, 'train')


@dp.message_handler(commands=['task'])
async def get_tasks(message: types.Message):
    user = message.from_user
    userid = user.id

    if (userid in user_ids) == False:
        train_mode[userid] = False
        user_ids.add(userid)
        current_task[userid] = -1
        current_command[userid] = ''
    if current_task[userid] != -1:
        await message.answer("–í—ã –∑–∞–±—ã–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    if current_command[userid] == 'task' or current_command[userid] == 'train':
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [str(c) for c in tasks_list]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", reply_markup=keyboard)
    change_current_command(message.from_user.id, 'task')


@dp.message_handler(commands=['leaderboard'])
async def get_results(message: types.Message):
    user = message.from_user
    userid = user.id

    if (userid in user_ids) == False:
        user_ids.add(userid)
        train_mode[userid] = False
        current_task[userid] = -1
        current_command[userid] = ''

    if current_task[userid] != -1:
        await message.answer("–í—ã –∑–∞–±—ã–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return

    if current_command[userid] == 'leaderboard':
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–≤—Å–µ'] + [str(c) for c in tasks_list]
    keyboard.add(*buttons)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è", reply_markup=keyboard)
    change_current_command(message.from_user.id, 'leaderboard')


@dp.message_handler()
async def simple_message(message: types.Message):
    print(message.from_user.username)
    user = message.from_user
    userid = user.id
    if (userid in user_ids) == False:
        train_mode[userid] = False
        user_ids.add(userid)
        current_task[userid] = -1
        current_command[userid] = ''

    if train_mode[userid] == True:
        result = check_task(user, current_task[userid], message.text)
        if result == 'True':
            await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üòé")
        else:
            
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üò¢")
            await message.answer(result)
        if current_task[userid] == 4:
            task = get_task(user, current_task[userid])
            answers_list = task.split('\n')
            answers_list.pop(0)
            try:
                answers_list.remove('\n')
                answers_list.remove(' ')
            except ValueError:
                print('all ok')
            answers_list = [re.sub("[\(\[].*?[\)\]]", "", c) for c in answers_list]
            answers_list = [c.lower() for c in answers_list]
            answers_list = [c.replace(' ', '') for c in answers_list]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = answers_list
            keyboard.add(*buttons)
            await message.answer(task, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await message.answer(get_task(user, current_task[userid]), parse_mode='Markdown')
    elif current_command[userid] == '':
        if current_task[userid] == -1:
            await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–æüò≠\n–í–æ—Å–ø—É–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞!")
            return
        result = check_task(user, current_task[userid], message.text)
        if result == 'True':
            await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üòé",parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            
        else:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üò¢",parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            await message.answer(result, parse_mode='Markdown', disable_web_page_preview=True)
        change_current_task(userid, -1)
    elif current_command[userid] == 'task':
        try:
            num = int(message.text)
        except ValueError:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        
        if (1 <= num and num <= 26) == False:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 26!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        if tasks_list.count(num) == 0:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æüò≠\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return

        change_current_task(userid, num)
        if current_task[userid] == 4:
            task = get_task(user, current_task[userid])
            answers_list = task.split('\n')
            answers_list.pop(0)
            try:
                answers_list.remove('\n')
                answers_list.remove(' ')
            except ValueError:
                print('all ok')
            answers_list = [re.sub("[\(\[].*?[\)\]]", "", c) for c in answers_list]
            answers_list = [c.lower() for c in answers_list]
            answers_list = [c.replace(' ', '') for c in answers_list]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = answers_list
            keyboard.add(*buttons)
            await message.answer(task, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await message.answer(get_task(user, current_task[userid]), parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            
            
        change_current_command(userid, '')
    elif current_command[userid] == 'train':
        try:
            num = int(message.text)
        except ValueError:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        
        if (1 <= num and num <= 26) == False:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 26!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        if tasks_list.count(num) == 0:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æüò≠\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return

        train_mode[userid] = True
        change_current_task(userid, num)
        if current_task[userid] == 4:
            task = get_task(user, current_task[userid])
            answers_list = task.split('\n')
            answers_list.pop(0)
            try:
                answers_list.remove('\n')
                answers_list.remove(' ')
            except ValueError:
                print('all ok')
            answers_list = [re.sub("[\(\[].*?[\)\]]", "", c) for c in answers_list]
            answers_list = [c.lower() for c in answers_list]
            answers_list = [c.replace(' ', '') for c in answers_list]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = answers_list
            keyboard.add(*buttons)
            await message.answer(task, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await message.answer(get_task(user, current_task[userid]), parse_mode='Markdown')
        change_current_command(userid, '')
    elif current_command[userid] == 'leaderboard':
        if message.text == "–≤—Å–µ":
            num = 0
        else:
            try:
                num = int(message.text)
            except ValueError:
                await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return
            
            if (1 <= num and num <= 26) == False:
                await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 26!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return
            if tasks_list.count(num) == 0:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æüò≠\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return

        await message.answer(get_leaderboard(user, num), disable_web_page_preview=True)
        
        change_current_command(userid, '')

if __name__ == '__main__':
    print(tasks_list)
    executor.start_polling(dp, skip_updates=True)
